const test = require('tape');
const randomBytes = require('.');

const MAX_BYTES = 65536;
const MAX_UINT32 = 4294967295;

test('sync', () => new Promise((t) => {
  t.plan(9);
  t.equals(randomBytes(0).length, 0, `len: ${0}`);
  t.equals(randomBytes(3).length, 3, `len: ${3}`);
  t.equals(randomBytes(30).length, 30, `len: ${30}`);
  t.equals(randomBytes(300).length, 300, `len: ${300}`);
  t.equals(randomBytes(17 + MAX_BYTES).length, 17 + MAX_BYTES, `len: ${17}${MAX_BYTES}`);
  t.equals(randomBytes(MAX_BYTES * 100).length, MAX_BYTES * 100, `len: ${MAX_BYTES * 100}`);
  t.throws(() => {
    randomBytes(MAX_UINT32 + 1);
  });
  t.throws(() => {
    t.equals(randomBytes(-1));
  });
  t.throws(() => {
    t.equals(randomBytes('hello'));
  });
}));

test('async', () => new Promise((t) => {
  t.plan(9);

  randomBytes(0, (err, resp) => {
    if (err) throw err;

    t.equals(resp.length, 0, `len: ${0}`);
  });

  randomBytes(3, (err, resp) => {
    if (err) throw err;

    t.equals(resp.length, 3, `len: ${3}`);
  });

  randomBytes(30, (err, resp) => {
    if (err) throw err;

    t.equals(resp.length, 30, `len: ${30}`);
  });

  randomBytes(300, (err, resp) => {
    if (err) throw err;

    t.equals(resp.length, 300, `len: ${300}`);
  });

  randomBytes(17 + MAX_BYTES, (err, resp) => {
    if (err) throw err;

    t.equals(resp.length, 17 + MAX_BYTES, `len: ${17}${MAX_BYTES}`);
  });

  randomBytes(MAX_BYTES * 100, (err, resp) => {
    if (err) throw err;

    t.equals(resp.length, MAX_BYTES * 100, `len: ${MAX_BYTES * 100}`);
  });

  t.throws(() => {
    randomBytes(MAX_UINT32 + 1, () => {
      t.ok(false, 'should not get here');
    });
  });

  t.throws(() => {
    randomBytes(-1, () => {
      t.ok(false, 'should not get here');
    });
  });

  t.throws(() => {
    randomBytes('hello', () => {
      t.ok(false, 'should not get here');
    });
  });
}));
