/**
 * @module List
 */
/**
 * Module dependencies.
 */

const Base = require('./base');
const { inherits } = require('../utils');
const { constants } = require('../runner');

const { EVENT_RUN_BEGIN } = constants;
const { EVENT_RUN_END } = constants;
const { EVENT_TEST_BEGIN } = constants;
const { EVENT_TEST_FAIL } = constants;
const { EVENT_TEST_PASS } = constants;
const { EVENT_TEST_PENDING } = constants;
const { color } = Base;
const { cursor } = Base;

/**
 * Expose `List`.
 */

exports = module.exports = List;

/**
 * Constructs a new `List` reporter instance.
 *
 * @public
 * @class
 * @memberof Mocha.reporters
 * @extends Mocha.reporters.Base
 * @param {Runner} runner - Instance triggers reporter actions.
 * @param {Object} [options] - runner options
 */
function List(runner, options) {
  Base.call(this, runner, options);

  const self = this;
  let n = 0;

  runner.on(EVENT_RUN_BEGIN, () => {
    Base.consoleLog();
  });

  runner.on(EVENT_TEST_BEGIN, (test) => {
    process.stdout.write(color('pass', `    ${test.fullTitle()}: `));
  });

  runner.on(EVENT_TEST_PENDING, (test) => {
    const fmt = color('checkmark', '  -') + color('pending', ' %s');
    Base.consoleLog(fmt, test.fullTitle());
  });

  runner.on(EVENT_TEST_PASS, (test) => {
    const fmt = color('checkmark', `  ${Base.symbols.ok}`)
      + color('pass', ' %s: ')
      + color(test.speed, '%dms');
    cursor.CR();
    Base.consoleLog(fmt, test.fullTitle(), test.duration);
  });

  runner.on(EVENT_TEST_FAIL, (test) => {
    cursor.CR();
    Base.consoleLog(color('fail', '  %d) %s'), ++n, test.fullTitle());
  });

  runner.once(EVENT_RUN_END, self.epilogue.bind(self));
}

/**
 * Inherit from `Base.prototype`.
 */
inherits(List, Base);

List.description = 'like "spec" reporter but flat';
